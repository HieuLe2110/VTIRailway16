DROP DATABASE IF EXISTS administer_exams;
CREATE DATABASE IF NOT EXISTS administer_exams;
USE administer_exams;

-- Table 1
DROP TABLE IF EXISTS Department;
CREATE TABLE Department(
	DepartmentID	TINYINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    DepartmentName	NVARCHAR(100) NOT NULL UNIQUE KEY
);

-- Table 2
DROP TABLE IF EXISTS `Position`;
CREATE TABLE `Position`(
	PositiontID		TINYINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    PositionName	ENUM('Dev', 'Test', 'Scrum Master', 'PM') NOT NULL UNIQUE KEY
);

-- Table 3
DROP TABLE IF EXISTS `Account`;
CREATE TABLE `Account`(
	AccountID		SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    Email			VARCHAR(100) NOT NULL UNIQUE KEY,
    UserName		VARCHAR(100)NOT NULL UNIQUE KEY,
    FullName		NVARCHAR(100)NOT NULL ,
    DepartmentID	TINYINT UNSIGNED NOT NULL,
    PositionID		TINYINT UNSIGNED NOT NULL,
    CreateDate		DATETIME DEFAULT NOW(),
    FOREIGN KEY (DepartmentID) REFERENCES Department(DepartmentID),
    FOREIGN KEY (PositionID) REFERENCES `Position`(PositiontID)
);

-- Table 4
DROP TABLE IF EXISTS `Group`;
CREATE TABLE `Group`(
	GroupID			TINYINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    GroupName		VARCHAR(100) NOT NULL UNIQUE KEY ,
    CreatorID		SMALLINT UNSIGNED NOT NULL,
    CreateDate		DATETIME DEFAULT NOW(),
    FOREIGN KEY (CreatorID) REFERENCES `Account`(AccountID)
);

-- Table 5
DROP TABLE IF EXISTS GroupAccount;
CREATE TABLE GroupAccount(
	GroupID			TINYINT UNSIGNED NOT NULL,
    AccountID		SMALLINT UNSIGNED NOT NULL,
    JoinDate		DATETIME DEFAULT NOW(),
    PRIMARY KEY(GroupID,AccountID),
    FOREIGN KEY(GroupID) REFERENCES `Group`(GroupID),
    FOREIGN KEY(AccountID) REFERENCES `Account`(AccountID)
);

-- Table 6
DROP TABLE IF EXISTS TypeQuestion;
CREATE TABLE TypeQuestion(
	TypeID			TINYINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    TypeName		ENUM('Essay', 'Multiple-Choice') NOT NULL UNIQUE KEY
);

-- Table 7
DROP TABLE IF EXISTS CategoryQuestion;
CREATE TABLE CategoryQuestion(
	CategoryID		TINYINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    CategoryName	NVARCHAR(50) NOT NULL UNIQUE KEY
);

-- Table 8
DROP TABLE IF EXISTS Question;
CREATE TABLE Question(
	QuestionID		TINYINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    Content			TEXT NOT NULL,
    CategoryID		TINYINT UNSIGNED NOT NULL,
    TypeID			TINYINT UNSIGNED NOT NULL,
    CreatorID		SMALLINT UNSIGNED NOT NULL,
    CreateDate		DATETIME DEFAULT NOW(),
    FOREIGN KEY(CategoryID) REFERENCES CategoryQuestion(CategoryID),
    FOREIGN KEY(TypeID) REFERENCES TypeQuestion(TypeID),
    FOREIGN KEY(CreatorID) REFERENCES `Account`(AccountID)
);

-- Table 9
DROP TABLE IF EXISTS Answer;
CREATE TABLE Answer(
	AnswerID		TINYINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    Content			NVARCHAR(100) NOT NULL,
    QuestionID		TINYINT UNSIGNED NOT NULL,
    isCorrect		BOOLEAN,
    FOREIGN KEY(QuestionID) REFERENCES `Question`(QuestionID)
);

-- Table 10
DROP TABLE IF EXISTS Exam;
CREATE TABLE Exam(
	ExamID			TINYINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    `Code`			NVARCHAR(100) NOT NULL,
    Title			NVARCHAR(100) NOT NULL,
    CategoryID		TINYINT UNSIGNED NOT NULL,
    Duration		TINYINT UNSIGNED NOT NULL,
    CreatorID		SMALLINT UNSIGNED NOT NULL,
    CreateDate		DATETIME DEFAULT NOW(),
    FOREIGN KEY(CreatorID) REFERENCES `Account`(AccountID),
    FOREIGN KEY(CategoryID) REFERENCES CategoryQuestion(CategoryID)
);

-- Table 11
DROP TABLE IF EXISTS ExamQuestion;
CREATE TABLE ExamQuestion(
	ExamID			TINYINT UNSIGNED NOT NULL,
    QuestionID		TINYINT UNSIGNED NOT NULL,
    FOREIGN KEY(ExamID) REFERENCES Exam(ExamID),
    FOREIGN KEY(QuestionID) REFERENCES Question(QuestionID),
    PRIMARY KEY (ExamID,QuestionID)
);